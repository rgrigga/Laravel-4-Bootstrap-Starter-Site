<?php
//redundancy is simplicity and simplicity is redundancy.  you could say that backwards, too, but it's true either way.
//
//Authentication and Authorization, however,  are two very different things.  I enjoy studying security and best practices, so I have done a bunch of research on this lately.
//
//Hi, my name is Secure_Controller.
//
//In my project, I have (admin, guest) & >1 usergroups: {partners, agents, clients,...}
//
//Sometimes I will be asked, "is this thing an admin?"  That's easy (usually no), unless it's me.  
//
//"Is this thing a member of this group?"
//
//We have a groups table, so we can just ask the DB.
//
//<code>
//    function is_auth($group){
//      $this->is_admin() ? $this->in_group($group) : FALSE
//    }
//
//    function is_admin($user){
//      return $this->ion_auth->is_admin();
//
//</code>
//
//I had started making some inherited classes to handle things, but I got frustrated with the time it took me to copy all these functions and regurgitate the logic... then it dawned on me: simplify to "Auth" and "Admin".  That's what I really wanted to know, anyway.
//
//My new Auth and Admin care not what kind of thing they're being asked about, they have no problem telling you NO.
//
//Ion Auth provides both of those functions in the ion_auth library: 
//*is_admin() 
//* in_group();
//
//I am the decision-maker, but i don't actually look stuff up.  Like <a href="http://bit.ly/YYWjLc" >Rob Blavoigovich</a>: that's what librarian's do.  
//
//If I need help, I could look in up in a library... Or I could get a helper to help... Hmm, I wish i had a library or a helper... i'll look there if I get stuck. 
//
//Anyway, Admin's status is special because he is allowed to do anything a guest or otherwise authorized use can do.  I have many groups, some will be ok to go here or there, but they're all different.
//
//
//
//
//TRUE ? (redundancy = simplicity) : (simplicity is redundancy)
////you know that's right!
//
//  you could say that backwards, too, but it's true either way.
  
?>
  